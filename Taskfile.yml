version: '3'

# AI Research Agent Task Runner
# This Taskfile provides automation for common development tasks

vars:
  PROJECT_NAME: ai-research-agent
  BACKEND_DIR: backend
  FRONTEND_DIR: frontend
  NODE_VERSION: "18"

tasks:
  # Development Tasks
  dev:
    desc: Run both frontend and backend in development mode
    cmds:
      - task: install
      - npm run dev
    
  dev:backend:
    desc: Run backend in development mode
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - npm run dev
    
  dev:frontend:
    desc: Run frontend in development mode
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - npm start

  # Installation Tasks
  install:
    desc: Install dependencies for all projects
    cmds:
      - npm install
      - task: install:backend
      - task: install:frontend
    
  install:backend:
    desc: Install backend dependencies
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - npm install
    
  install:frontend:
    desc: Install frontend dependencies
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - npm install

  # Build Tasks
  build:
    desc: Build both frontend and backend
    cmds:
      - task: build:backend
      - task: build:frontend
    
  build:backend:
    desc: Build backend TypeScript
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - npm run build
    
  build:frontend:
    desc: Build frontend React app
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - npm run build

  # Linting Tasks
  lint:
    desc: Run linting on all projects
    cmds:
      - task: lint:backend
      - task: lint:frontend
    
  lint:backend:
    desc: Run ESLint on backend
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - npm run lint
    
  lint:frontend:
    desc: Run ESLint on frontend
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - npx eslint src --ext .ts,.tsx --max-warnings 0
    
  lint:fix:
    desc: Fix linting issues in all projects
    cmds:
      - task: lint:fix:backend
      - task: lint:fix:frontend
    
  lint:fix:backend:
    desc: Fix ESLint issues in backend
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - npm run lint:fix
    
  lint:fix:frontend:
    desc: Fix ESLint issues in frontend
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - npx eslint src --ext .ts,.tsx --fix

  # Testing Tasks
  test:
    desc: Run tests for all projects
    cmds:
      - task: test:backend
      - task: test:frontend
    
  test:backend:
    desc: Run backend tests
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - npm test
    
  test:frontend:
    desc: Run frontend tests
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - npm test -- --watchAll=false

  # Type Checking
  typecheck:
    desc: Run TypeScript type checking
    cmds:
      - task: typecheck:backend
      - task: typecheck:frontend
    
  typecheck:backend:
    desc: Type check backend
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - npx tsc --noEmit
    
  typecheck:frontend:
    desc: Type check frontend
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - npx tsc --noEmit

  # Cleanup Tasks
  clean:
    desc: Clean all build artifacts
    cmds:
      - task: clean:backend
      - task: clean:frontend
      - rm -rf node_modules
    
  clean:backend:
    desc: Clean backend build artifacts
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - rm -rf dist
      - rm -rf node_modules
    
  clean:frontend:
    desc: Clean frontend build artifacts
    dir: "{{.FRONTEND_DIR}}"
    cmds:
      - rm -rf build
      - rm -rf node_modules

  # Fix Tasks
  fix:agent:
    desc: Fix agent response formatting issues
    cmds:
      - echo "Fixing agent verbose output..."
      - task: fix:agent:verbose
      - task: fix:agent:prompt
      - task: fix:memory:init
    
  fix:agent:verbose:
    desc: Fix verbose output in LangChain agent
    cmds:
      - echo "Agent verbose setting already fixed - check backend/src/core/langchain-agent.runner.ts"
    
  fix:agent:prompt:
    desc: Improve agent system prompt for cleaner output
    cmds:
      - echo "Agent prompt improvements completed"
    
  fix:memory:init:
    desc: Fix memory tool initialization with proper dependency injection
    cmds:
      - echo "‚úÖ Memory tool initialization fixed!"
      - echo "  - ServiceFactory implements proper dependency injection"
      - echo "  - VectorService and EmbeddingService properly initialized"
      - echo "  - MemoryTool created with correct dependencies"
      - echo "  - Factory pattern for service management"
      - echo "  - Memory persistence layer added"

  # Cleanup Python files (user prefers TypeScript)
  clean:python:
    desc: Remove Python files from TypeScript-only project
    cmds:
      - rm -f setup_chroma.py
      - rm -f test-deepseek.js
      - echo "Python files removed - project is now TypeScript-only"

  # Agent Architecture Tasks
  agent:cleanup:
    desc: Clean up deprecated agent files after migration to unified architecture
    cmds:
      - echo "Cleaning up deprecated agent files..."
      - rm -f backend/src/core/langchain-agent.runner.ts
      - rm -f backend/src/core/agent.runner.ts
      - rm -f backend/src/core/simple-agent.runner.ts
      - echo "Deprecated agent files cleaned up"
      
  agent:migrate:
    desc: Complete migration to unified agent architecture
    cmds:
      - task: agent:cleanup
      - echo "üéâ Agent architecture migration complete!"
      - echo "‚úÖ New unified agent supports:"
      - echo "   - Strategy pattern for different execution modes"
      - echo "   - Auto-fallback and retry mechanisms"
      - echo "   - Improved error handling and health checks"
      - echo "   - Memory management across strategies"
      - echo "   - Configurable agent types (research, chat, analysis)"

  # Memory Management Tasks
  memory:setup:
    desc: Initialize memory services (vector database and embeddings)
    cmds:
      - echo "üîß Setting up memory services..."
      - echo "  üìä Embedding Service: {{.EMBEDDING_PROVIDER}} with {{.EMBEDDING_MODEL}}"
      - echo "  üóÑÔ∏è  Vector Database: ChromaDB at {{.CHROMA_ENDPOINT}}"
      - echo "  üìù Collection: {{.COLLECTION_NAME}}"
      - echo "‚úÖ Memory services configured"
    vars:
      EMBEDDING_PROVIDER: "{{default \"huggingface\" .EMBEDDING_PROVIDER}}"
      EMBEDDING_MODEL: "{{default \"sentence-transformers/all-MiniLM-L6-v2\" .EMBEDDING_MODEL}}"
      CHROMA_ENDPOINT: "{{default \"http://localhost:8000\" .CHROMA_ENDPOINT}}"
      COLLECTION_NAME: "{{default \"research_memory\" .COLLECTION_NAME}}"
  
  memory:test:
    desc: Test memory functionality
    cmds:
      - echo "üß™ Testing memory services..."
      - echo "  Testing with development server at http://localhost:3001"
      - echo "  Available endpoints:"
      - echo "    - POST /api/memory/store - Store information"
      - echo "    - POST /api/memory/search - Search memory"
      - echo "    - GET /api/memory/insights - Memory analytics"
      - echo "    - POST /api/memory/optimize - Optimize storage"
      - echo "    - GET /api/services/health - Service health"
  
  memory:check:
    desc: Check memory system health
    cmds:
      - echo "ü©∫ Checking memory system health..."
      - echo "  Run 'curl http://localhost:3001/api/services/health' to check status"
      - echo "  Verify ChromaDB is running on configured endpoint"
      - echo "  Check embedding service connectivity"

  # Cache Management Tasks
  cache:setup:
    desc: Initialize cache system (Redis + In-memory)
    cmds:
      - echo "üóÑÔ∏è Setting up multi-level cache system..."
      - echo "  üß† In-memory cache configured"
      - echo "  üì¶ Redis cache configured"
      - echo "  ‚öôÔ∏è Cache configuration loaded"
      - echo "‚úÖ Cache system configured"

  cache:test:
    desc: Test cache functionality
    cmds:
      - echo "üß™ Testing cache services..."
      - echo "  Testing with development server at http://localhost:3001"
      - echo "  Available endpoints:"
      - echo "    - GET /api/cache/stats - Get cache statistics"
      - echo "    - GET /api/cache/info - Get cache information"
      - echo "    - GET /api/cache/health - Check cache health"
      - echo "    - POST /api/cache/clear - Clear cache"
      - echo "    - POST /api/cache/invalidate - Invalidate by pattern/tag"
      - echo "    - POST /api/cache/warmup - Warm up cache"

  cache:stats:
    desc: Get cache statistics
    cmds:
      - echo "üìä Getting cache statistics..."
      - echo "  Run 'curl http://localhost:3001/api/cache/stats' for detailed stats"
      - echo "  Run 'curl http://localhost:3001/api/cache/info' for cache info"

  cache:health:
    desc: Check cache system health
    cmds:
      - echo "ü©∫ Checking cache system health..."
      - echo "  Run 'curl http://localhost:3001/api/cache/health' to check status"
      - echo "  Verify Redis connection if enabled"
      - echo "  Check memory cache limits"

  cache:clear:
    desc: Clear all cache data (WARNING destructive)
    cmds:
      - echo "‚ö†Ô∏è  WARNING This will clear all cache data!"
      - echo "  Run with confirmation curl to clear cache"

  cache:warmup:
    desc: Warm up cache with common data
    cmds:
      - echo "üî• Warming up cache layers..."
      - echo "  Available warmup types llm, embedding, websearch"

  cache:redis:start:
    desc: Start Redis server for cache layer
    cmds:
      - echo "üöÄ Starting Redis server..."
      - echo "  Redis will start on port 6379"
      - echo "‚úÖ Redis configuration ready"

  cache:redis:stop:
    desc: Stop Redis server
    cmds:
      - echo "üõë Stopping Redis server..."
      - echo "‚úÖ Redis stop command sent"

  cache:redis:status:
    desc: Check Redis server status
    cmds:
      - echo "üì° Checking Redis status..."
      - echo "  Use redis-cli ping to test connection"

  # Service Layer Architecture Tasks
  test:repository-pattern:
    desc: Test repository pattern implementation
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - echo "üîç Testing repository pattern..."
      - echo "  Testing vector and embedding repositories"
      - echo "  Checking configuration management"
      - echo "‚úÖ Repository pattern test complete"

  test:configuration-manager:
    desc: Test unified configuration management
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - echo "‚öôÔ∏è Testing configuration manager..."
      - echo "  Testing configuration validation"
      - echo "  Testing configuration export"
      - echo "  Testing environment checks"
      - echo "‚úÖ Configuration manager test complete"

  test:service-interfaces:
    desc: Test service interface implementations
    dir: "{{.BACKEND_DIR}}"
    cmds:
      - echo "üîß Testing service interfaces..."
      - echo "  Testing LLM service interface"
      - echo "  Testing service health checks"
      - echo "  Testing dependency injection"
      - echo "‚úÖ Service interface test complete"

  validate:architecture:
    desc: Validate entire service layer architecture
    cmds:
      - task: lint
      - task: test:repository-pattern
      - task: test:configuration-manager
      - task: test:service-interfaces
      - echo "üéØ Service layer architecture validation complete"

  # Docker Tasks
  docker:build:
    desc: Build Docker containers
    cmds:
      - docker-compose build
    
  docker:up:
    desc: Start Docker containers
    cmds:
      - docker-compose up -d
    
  docker:down:
    desc: Stop Docker containers
    cmds:
      - docker-compose down
    
  docker:logs:
    desc: View Docker logs
    cmds:
      - docker-compose logs -f

  # Health Check
  health:
    desc: Check project health
    cmds:
      - task: typecheck
      - task: lint
      - task: test
      - echo "‚úÖ Project health check completed"

  # Pre-commit Tasks
  pre-commit:
    desc: Run pre-commit checks
    cmds:
      - task: lint:fix
      - task: typecheck
      - task: test
      - echo "‚úÖ Pre-commit checks passed"

  # Setup Tasks
  setup:
    desc: Complete project setup
    cmds:
      - task: install
      - task: clean:python
      - task: fix:agent
      - task: build
      - echo "‚úÖ Project setup completed"

  # Development Utils
  dev:reset:
    desc: Reset development environment
    cmds:
      - task: clean
      - task: install
      - task: build
      - echo "‚úÖ Development environment reset"

  format:
    desc: Format code using prettier
    cmds:
      - npx prettier --write "**/*.{ts,tsx,js,jsx,json,md}"
    
  format:check:
    desc: Check code formatting
    cmds:
      - npx prettier --check "**/*.{ts,tsx,js,jsx,json,md}" 